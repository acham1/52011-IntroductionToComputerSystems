// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // This chip design follows the proposal from Figure 5.9 in the textbook.

    // This Mux16 determines if A will hold a data memory or instruction memory
    // i.e. instruction memory if highest-order bit is false
    Mux16(a=instruction, b=ALUout, sel=instruction[15], out=intoA);

    // This Mux16 determines if M/A will be fed to the ALU
    // i.e. feed M if instruction[12] is true, A otherwise
    Mux16(sel=instruction[12], a=A, b=inM, out=AorM);

    // ARegister stores the value of A
    // i.e. load a new value iff in the case of A-instruction or A-destination
    Not(in=instruction[15], out=AInstruct);
    Or(a=AInstruct, b=instruction[5], out=loadA);
    ARegister(in=intoA, load=loadA, out=A, out[0..14]=addressM);

    // DRegister stores the value of D
    // i.e. load a new value into D from ALU iff instruction[4] is true 
    // and instruction is C-type
    And(a=instruction[4], b=instruction[15], out=loadD);
    DRegister(in=ALUout, load=loadD, out=D);

    // instruction bits 6..11 specify computation type
    ALU(x=D, y=AorM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=ALUout, zr=zr, ng=ng);

    // only signal to write to memory if C-instruction and M is a destination
    And(a=instruction[3], b=instruction[15], out=writeM);

    // create boolean values for comparison value's negative-, zero-, and positive-ness
    // ANDed with the comparison type
    And(a=instruction[2], b=ng, out=negJump);
    And(a=instruction[1], b=zr, out=zeroJump);
    And(a=instruction[0], b=pos, out=posJump);
    Not(in=ng, out=notNeg);
    Not(in=zr, out=notZero);
    And(a=notNeg, b=notZero, out=pos);

    // if comparison conditions are satisfied and instruction is c-type, then jump
    Or8Way(in[0]=negJump, in[1]=zeroJump, in[2]=posJump, out=compareTrue);
    And(a=compareTrue, b=instruction[15], out=doJump);

    // if jump, the set PC to load new step number, otherwise set PC to increment
    Not(in=doJump, out=notJump);
    PC(in=A, load=doJump, inc=notJump, reset=reset, out[0..14]=pc);
}