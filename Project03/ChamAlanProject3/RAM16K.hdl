// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/b/RAM16K.hdl

/**
 * Memory of 16K registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM16K {
    IN in[16], load, address[14];
    OUT out[16];

    PARTS:
    /* Very similar to RAM4K */
    /* Use DMux4Way to send load signal only to the correct register */
    DMux4Way(in=load, sel=address[12..13], a=loadTo0, b=loadTo1, c=loadTo2, d=loadTo3);

    /* Use 4 RAM4K containing ~16k 16-bit registers total */
    RAM4K(in=in, load=loadTo0, address=address[0..11], out=outOf0);
    RAM4K(in=in, load=loadTo1, address=address[0..11], out=outOf1);
    RAM4K(in=in, load=loadTo2, address=address[0..11], out=outOf2);
    RAM4K(in=in, load=loadTo3, address=address[0..11], out=outOf3);

    /* Use Mux4Way16 to send output from correct register to chip output */
    Mux4Way16(a=outOf0, b=outOf1, c=outOf2, d=outOf3, sel=address[12..13], out=out);
}